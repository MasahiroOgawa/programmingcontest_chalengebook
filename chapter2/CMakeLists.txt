project(chapter2 CXX) #CXX means that we use c++ as the language

add_executable(bubunnwa bubunnwa/main.cpp)
add_executable(fibonacci fibonacci/main.cpp)
add_executable(lakecounting lakecounting/main.cpp)
add_executable(maze_shortestpath maze_shortestpath/main.cpp)
add_executable(perm2 perm2/main.cpp)
add_executable(sortpermutation sortpermutation/main.cpp)
add_executable(nolimnum_napsack_bad nolimnum_napsack/bad.cpp)
add_executable(nolimnum_napsack_good nolimnum_napsack/good.cpp)
add_executable(napsack_reusevector napsackproblem/reuse_vector.cpp)
add_executable(nolimnum_napsack_reusevector nolimnum_napsack/reuse_vector.cpp)
add_executable(napsack_hugeweight napsackproblem/hugeweight.cpp)
add_executable(limnum_partialsum_slow limnum_partialsum/slow.cpp)
add_executable(limnum_partialsum_faster limnum_partialsum/faster.cpp)
add_executable(longest_increasing_subsequence_on2 longest_increasing_subsequence/on2.cpp)
add_executable(longest_increasing_subsequence_mine longest_increasing_subsequence/mine.cpp)
add_executable(longest_increasing_subsequence_final longest_increasing_subsequence/final.cpp)
add_executable(mdivision_ofn mdivision_ofn/main.cpp)
add_executable(duplicate_combination duplicate_combination/main.cpp)
add_executable(priority_queue priority_queue/main.cpp)
add_executable(stl_priorityqueue priority_queue/stl_priorityqueue.cpp)
add_executable(poj2431 priority_queue/poj2431.cpp)
add_library(binarysearchtree binary_searchtree/binarysearchtree.cpp)
add_executable(test_binarysearch binary_searchtree/test_binarysearch.cpp)
target_link_libraries(test_binarysearch binarysearchtree)
add_executable(stlset binary_searchtree/stlset.cpp)
add_executable(stlmap binary_searchtree/stlmap.cpp)
add_library(unionfind_tree unionfind_tree/unionfind_tree.cpp)
add_executable(unionfind_test unionfind_tree/unionfind_test.cpp)
target_link_libraries(unionfind_test unionfind_tree)
add_executable(foodchain unionfind_tree/foodchain.cpp)
target_link_libraries(foodchain unionfind_tree)
add_executable(bipartitegraph_decision bipartite_graph/bipartitegraph_decision.cpp)
add_library(adjacencylist graph/adjacencylist.cpp)
add_executable(bellman_ford minimumpath/bellman_ford.cpp)
target_link_libraries(bellman_ford adjacencylist)
add_executable(dijkstra minimumpath/dijkstra.cpp)
target_link_libraries(dijkstra adjacencylist)
